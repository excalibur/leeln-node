
option java_package = "org.fightteam.leeln.proto";
option java_outer_classname = "RpcProto";

// This is default, but it's nice to be explicit
option optimize_for = SPEED;

message RpcRequest {
    // Sequence ID number, since Netty is asynchronious by nature
    // We need this to implement callbacks. This ID number is only
    // unique to a Netty Channel
    // NOTE: leave the ID out if you don't want any response 
    optional int32 id = 1;

    required string method_name = 2;

    required bool is_blocking_service = 3;

    required bytes request_message = 4;
}

message RpcResponse {
    // Request Sequence ID number that this response is
    // "responding" to. This is *required* since we don't
    // send back responses unless a sequence ID was provided
    // (that would be extra traffic not necessary)
    required int32 id = 1;

    // This is optional, since we could be sending back an
    // error response in which case we would not have a 
    // response message
    optional bytes response_message = 2;

    optional ErrorCode error_code = 3;

    optional string error_message = 4;
}

enum ErrorCode {

    // Server-side errors
    BAD_REQUEST_DATA = 0; // Server received bad request data
    BAD_REQUEST_PROTO = 1; // Server received bad request proto
    SERVICE_NOT_FOUND = 2; // Service not found on server
    METHOD_NOT_FOUND = 3; // Method not found on server
    RPC_ERROR = 4; // Rpc threw exception on server
    RPC_FAILED = 5; // Rpc failed on server

    // Client-side errors (these are returned by the client-side code)
    INVALID_REQUEST_PROTO = 6; // Rpc was called with invalid request proto
    BAD_RESPONSE_PROTO = 7; // Server returned a bad response proto
    UNKNOWN_HOST = 8; // Could not find supplied host
    IO_ERROR = 9; // I/O error while communicating with server

}
